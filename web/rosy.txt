-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Painless bindings for the ROS robotics framework.
--   
--   Simplified ROS bindings, powered by the roshask library.
@package rosy
@version 0.1

module Paths_rosy
version :: Version
getBinDir :: IO FilePath
getLibDir :: IO FilePath
getDynLibDir :: IO FilePath
getDataDir :: IO FilePath
getLibexecDir :: IO FilePath
getDataFileName :: FilePath -> IO FilePath
getSysconfDir :: IO FilePath

module Rosy.Util
type DPoint = (Double, Double)
type DVector = DPoint

-- | Converts an angle in radians to degrees.
radiansToDegrees :: Floating a => a -> a

-- | Converts an angle in degrees to radians.
degreesToRadians :: Floating a => a -> a
quotBy :: (Real a, Integral b) => a -> a -> b
remBy :: Real a => a -> a -> a

-- | The dot product of two vectors.
dotProdVec :: Floating a => (a, a) -> (a, a) -> a

-- | The magniture of the cross product of two vectors
crossProdVec :: RealFloat a => (a, a) -> (a, a) -> a

-- | The magnitude of a vector.
magnitudeVec :: Floating a => (a, a) -> a

-- | The angle of this vector, relative to the +ve x-axis.
angleVec :: RealFloat a => (a, a) -> a
scalarVec :: Floating a => a -> a -> (a, a)
addVec :: Floating a => (a, a) -> (a, a) -> (a, a)
negVec :: Floating a => (a, a) -> (a, a)
sumVec :: Floating a => [(a, a)] -> (a, a)
averageVec :: Floating a => [(a, a)] -> (a, a)
subVec :: Floating a => (a, a) -> (a, a) -> (a, a)
mulVec :: Floating a => a -> (a, a) -> (a, a)
divVec :: Floating a => (a, a) -> a -> (a, a)

-- | creates a normal vector given an angle in radians
normVec :: Floating a => a -> (a, a)
type DLine = (DPoint, DPoint)
type DCircle = (DPoint, Double)
circleLineIntersection :: DCircle -> DLine -> [DPoint]
average :: Floating a => [a] -> a
(><) :: (a -> c) -> (b -> d) -> (a, b) -> (c, d)
swap :: (a, b) -> (b, a)

module Rosy.Controller.Core
secondsLens :: Functor f => (Int -> f Int) -> Clock -> f Clock
minutesLens :: Functor f => (Int -> f Int) -> Clock -> f Clock
hoursLens :: Functor f => (Int -> f Int) -> Clock -> f Clock

-- | Command the robot to speak some sentence.
data Say
Say :: String -> Say
class Subscribed a
subscribed :: Subscribed a => Node (Topic IO a)

-- | The current time in hours, minutes and seconds.
data Clock
Clock :: Int -> Int -> Int -> Clock
[hours] :: Clock -> Int
[minutes] :: Clock -> Int
[seconds] :: Clock -> Int
clockFromUTCTime :: UTCTime -> Clock
class Published a
published :: Published a => Topic IO a -> Node ()
instance Rosy.Controller.Core.Published Rosy.Controller.Core.Say
instance (Rosy.Controller.Core.Published a, Rosy.Controller.Core.Published b) => Rosy.Controller.Core.Published (a, b)
instance (Rosy.Controller.Core.Published a, Rosy.Controller.Core.Published b, Rosy.Controller.Core.Published c) => Rosy.Controller.Core.Published (a, b, c)
instance (Rosy.Controller.Core.Published a, Rosy.Controller.Core.Published b, Rosy.Controller.Core.Published c, Rosy.Controller.Core.Published d) => Rosy.Controller.Core.Published (a, b, c, d)
instance (Rosy.Controller.Core.Published a, Rosy.Controller.Core.Published b, Rosy.Controller.Core.Published c, Rosy.Controller.Core.Published d, Rosy.Controller.Core.Published e) => Rosy.Controller.Core.Published (a, b, c, d, e)
instance (Rosy.Controller.Core.Published a, Rosy.Controller.Core.Published b) => Rosy.Controller.Core.Published (Data.Either.Either a b)
instance Rosy.Controller.Core.Published a => Rosy.Controller.Core.Published (GHC.Maybe.Maybe a)
instance Rosy.Controller.Core.Published ()
instance Data.Default.Generics.Default Rosy.Controller.Core.Clock
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Core.Clock
instance GHC.Generics.Generic Rosy.Controller.Core.Clock
instance GHC.Classes.Ord Rosy.Controller.Core.Clock
instance GHC.Classes.Eq Rosy.Controller.Core.Clock
instance GHC.Show.Show Rosy.Controller.Core.Clock
instance GHC.Generics.Generic Rosy.Controller.Core.Say
instance GHC.Classes.Ord Rosy.Controller.Core.Say
instance GHC.Classes.Eq Rosy.Controller.Core.Say
instance GHC.Show.Show Rosy.Controller.Core.Say
instance (Rosy.Controller.Core.Subscribed a, Rosy.Controller.Core.Subscribed b) => Rosy.Controller.Core.Subscribed (a, b)
instance (Rosy.Controller.Core.Subscribed a, Rosy.Controller.Core.Subscribed b, Rosy.Controller.Core.Subscribed c) => Rosy.Controller.Core.Subscribed (a, b, c)
instance (Rosy.Controller.Core.Subscribed a, Rosy.Controller.Core.Subscribed b, Rosy.Controller.Core.Subscribed c, Rosy.Controller.Core.Subscribed d) => Rosy.Controller.Core.Subscribed (a, b, c, d)
instance (Rosy.Controller.Core.Subscribed a, Rosy.Controller.Core.Subscribed b, Rosy.Controller.Core.Subscribed c, Rosy.Controller.Core.Subscribed d, Rosy.Controller.Core.Subscribed e) => Rosy.Controller.Core.Subscribed (a, b, c, d, e)
instance (Rosy.Controller.Core.Subscribed a, Rosy.Controller.Core.Subscribed b) => Rosy.Controller.Core.Subscribed (Data.Either.Either a b)
instance Rosy.Controller.Core.Subscribed a => Rosy.Controller.Core.Subscribed (GHC.Maybe.Maybe a)
instance Rosy.Controller.Core.Subscribed ()

module Rosy.Controller.Kobuki
ledColor1Lens :: Functor f => (Color -> f Color) -> Led1 -> f Led1
ledColor2Lens :: Functor f => (Color -> f Color) -> Led2 -> f Led2
velocityAngularLens :: Functor f => (Double -> f Double) -> Velocity -> f Velocity
velocityLinearLens :: Functor f => (Double -> f Double) -> Velocity -> f Velocity
positionYLens :: Functor f => (Double -> f Double) -> Position -> f Position
positionXLens :: Functor f => (Double -> f Double) -> Position -> f Position
orientationLens :: Functor f => (Double -> f Double) -> Orientation -> f Orientation
butttonStatus0Lens :: Functor f => (ButtonStatus -> f ButtonStatus) -> Button0 -> f Button0
buttonStatus1Lens :: Functor f => (ButtonStatus -> f ButtonStatus) -> Button1 -> f Button1
butttonStatus2Lens :: Functor f => (ButtonStatus -> f ButtonStatus) -> Button2 -> f Button2
bumperStatusLeftLens :: Functor f => (BumperStatus -> f BumperStatus) -> BumperLeft -> f BumperLeft
bumperStatusCenterLens :: Functor f => (BumperStatus -> f BumperStatus) -> BumperCenter -> f BumperCenter
bumperRightStatusLens :: Functor f => (BumperStatus -> f BumperStatus) -> BumperRight -> f BumperRight
cliffStatusLeftLens :: Functor f => (CliffStatus -> f CliffStatus) -> CliffLeft -> f CliffLeft
cliffStatusCenterLens :: Functor f => (CliffStatus -> f CliffStatus) -> CliffCenter -> f CliffCenter
cliffStatusRightLens :: Functor f => (CliffStatus -> f CliffStatus) -> CliffRight -> f CliffRight
wheelStatusLeftLens :: Functor f => (WheelStatus -> f WheelStatus) -> WheelLeft -> f WheelLeft
wheelStatusRightLens :: Functor f => (WheelStatus -> f WheelStatus) -> WheelRight -> f WheelRight

-- | One of the seven pre-configured robot sounds.
data Sound
OnSound :: Sound
OffSound :: Sound
Rechargesound :: Sound
ButtonSound :: Sound
ErrorSound :: Sound
CleaningStartSound :: Sound
CleaningEndSound :: Sound
soundToROS :: Sound -> Sound

-- | All the possible robot led colors.
data Color
Black :: Color
Green :: Color
Orange :: Color
Red :: Color
colorToROS :: Color -> Word8

-- | The robot's first led light.
data Led1
Led1 :: Color -> Led1
[ledColor1] :: Led1 -> Color
led1ToROS :: Led1 -> Led

-- | The robot's second led light.
data Led2
Led2 :: Color -> Led2
[ledColor2] :: Led2 -> Color
led2ToROS :: Led2 -> Led

-- | The velocity of the robot is defined using two parameters.
data Velocity
Velocity :: Double -> Double -> Velocity

-- | Linear velocity in the same direction as the robot (cm/s)
[velocityLinear] :: Velocity -> Double

-- | Angular velocity in the counter-clockwise direction (radians/s)
[velocityAngular] :: Velocity -> Double
addVelocity :: Velocity -> Velocity -> Velocity
velocityFromROS :: Twist -> Velocity
velocityToROS :: Velocity -> Twist

-- | The current position of the robot.
data Position
Position :: Double -> Double -> Position

-- | Coordinate in the horizontal X axis.
[positionX] :: Position -> Double

-- | Coordinate in the vertical Y axis.
[positionY] :: Position -> Double
pointToPosition :: Point -> Position

-- | The orientation of the robot.
data Orientation
Orientation :: Double -> Orientation

-- | Orientation of the robot as an angle relative to the horizontal X axis
--   (radians).
[orientation] :: Orientation -> Double
orientationFromROS :: Quaternion -> Orientation
orientationToROS :: Orientation -> Quaternion

-- | When a button is <a>Released</a> or <a>Pressed</a>.
data ButtonStatus
Released :: ButtonStatus
Pressed :: ButtonStatus

-- | The first button of the robot.
data Button0
Button0 :: ButtonStatus -> Button0
[butttonStatus0] :: Button0 -> ButtonStatus

-- | The second button of the robot.
data Button1
Button1 :: ButtonStatus -> Button1
[buttonStatus1] :: Button1 -> ButtonStatus

-- | The third button of the robot.
data Button2
Button2 :: ButtonStatus -> Button2
[butttonStatus2] :: Button2 -> ButtonStatus

-- | When a bumper is <a>Pressed</a> against a wall or <a>Released</a> from
--   a wall.
type BumperStatus = ButtonStatus

-- | The left-sided bumper of the robot.
data BumperLeft
BumperLeft :: BumperStatus -> BumperLeft
[bumperStatusLeft] :: BumperLeft -> BumperStatus

-- | The front bumper of the robot.
data BumperCenter
BumperCenter :: BumperStatus -> BumperCenter
[bumperStatusCenter] :: BumperCenter -> BumperStatus

-- | The right-sided bumper of the robot.
data BumperRight
BumperRight :: BumperStatus -> BumperRight
[bumperRightStatus] :: BumperRight -> BumperStatus

-- | When a cliff (downward height) sensor is looking at the <a>Floor</a>
--   or at a <a>Cliff</a>.
data CliffStatus
Floor :: CliffStatus
Cliff :: CliffStatus

-- | The left-sided cliff sensor of the robot.
data CliffLeft
CliffLeft :: CliffStatus -> CliffLeft
[cliffStatusLeft] :: CliffLeft -> CliffStatus

-- | The front cliff sensor of the robot.
data CliffCenter
CliffCenter :: CliffStatus -> CliffCenter
[cliffStatusCenter] :: CliffCenter -> CliffStatus

-- | The right-sided cliff sensor of the robot.
data CliffRight
CliffRight :: CliffStatus -> CliffRight
[cliffStatusRight] :: CliffRight -> CliffStatus

-- | When one of the robot's wheels is touching the <a>Ground</a> or is
--   suspended in the <a>Air</a>.
data WheelStatus
Ground :: WheelStatus
Air :: WheelStatus

-- | The left-side wheel of the robot.
data WheelLeft
WheelLeft :: WheelStatus -> WheelLeft
[wheelStatusLeft] :: WheelLeft -> WheelStatus

-- | The right-side wheel of the robot.
data WheelRight
WheelRight :: WheelStatus -> WheelRight
[wheelStatusRight] :: WheelRight -> WheelStatus
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.WheelRight
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.WheelRight
instance GHC.Generics.Generic Rosy.Controller.Kobuki.WheelRight
instance GHC.Classes.Ord Rosy.Controller.Kobuki.WheelRight
instance GHC.Classes.Eq Rosy.Controller.Kobuki.WheelRight
instance GHC.Show.Show Rosy.Controller.Kobuki.WheelRight
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.WheelLeft
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.WheelLeft
instance GHC.Generics.Generic Rosy.Controller.Kobuki.WheelLeft
instance GHC.Classes.Ord Rosy.Controller.Kobuki.WheelLeft
instance GHC.Classes.Eq Rosy.Controller.Kobuki.WheelLeft
instance GHC.Show.Show Rosy.Controller.Kobuki.WheelLeft
instance GHC.Enum.Enum Rosy.Controller.Kobuki.WheelStatus
instance GHC.Generics.Generic Rosy.Controller.Kobuki.WheelStatus
instance GHC.Classes.Ord Rosy.Controller.Kobuki.WheelStatus
instance GHC.Classes.Eq Rosy.Controller.Kobuki.WheelStatus
instance GHC.Show.Show Rosy.Controller.Kobuki.WheelStatus
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.WheelStatus
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.CliffRight
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.CliffRight
instance GHC.Generics.Generic Rosy.Controller.Kobuki.CliffRight
instance GHC.Classes.Ord Rosy.Controller.Kobuki.CliffRight
instance GHC.Classes.Eq Rosy.Controller.Kobuki.CliffRight
instance GHC.Show.Show Rosy.Controller.Kobuki.CliffRight
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.CliffCenter
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.CliffCenter
instance GHC.Generics.Generic Rosy.Controller.Kobuki.CliffCenter
instance GHC.Classes.Ord Rosy.Controller.Kobuki.CliffCenter
instance GHC.Classes.Eq Rosy.Controller.Kobuki.CliffCenter
instance GHC.Show.Show Rosy.Controller.Kobuki.CliffCenter
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.CliffLeft
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.CliffLeft
instance GHC.Generics.Generic Rosy.Controller.Kobuki.CliffLeft
instance GHC.Classes.Ord Rosy.Controller.Kobuki.CliffLeft
instance GHC.Classes.Eq Rosy.Controller.Kobuki.CliffLeft
instance GHC.Show.Show Rosy.Controller.Kobuki.CliffLeft
instance GHC.Enum.Enum Rosy.Controller.Kobuki.CliffStatus
instance GHC.Generics.Generic Rosy.Controller.Kobuki.CliffStatus
instance GHC.Classes.Ord Rosy.Controller.Kobuki.CliffStatus
instance GHC.Classes.Eq Rosy.Controller.Kobuki.CliffStatus
instance GHC.Show.Show Rosy.Controller.Kobuki.CliffStatus
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.CliffStatus
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.BumperRight
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.BumperRight
instance GHC.Generics.Generic Rosy.Controller.Kobuki.BumperRight
instance GHC.Classes.Ord Rosy.Controller.Kobuki.BumperRight
instance GHC.Classes.Eq Rosy.Controller.Kobuki.BumperRight
instance GHC.Show.Show Rosy.Controller.Kobuki.BumperRight
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.BumperCenter
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.BumperCenter
instance GHC.Generics.Generic Rosy.Controller.Kobuki.BumperCenter
instance GHC.Classes.Ord Rosy.Controller.Kobuki.BumperCenter
instance GHC.Classes.Eq Rosy.Controller.Kobuki.BumperCenter
instance GHC.Show.Show Rosy.Controller.Kobuki.BumperCenter
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.BumperLeft
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.BumperLeft
instance GHC.Generics.Generic Rosy.Controller.Kobuki.BumperLeft
instance GHC.Classes.Ord Rosy.Controller.Kobuki.BumperLeft
instance GHC.Classes.Eq Rosy.Controller.Kobuki.BumperLeft
instance GHC.Show.Show Rosy.Controller.Kobuki.BumperLeft
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Button2
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.Button2
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Button2
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Button2
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Button2
instance GHC.Show.Show Rosy.Controller.Kobuki.Button2
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Button1
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.Button1
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Button1
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Button1
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Button1
instance GHC.Show.Show Rosy.Controller.Kobuki.Button1
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Button0
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.Button0
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Button0
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Button0
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Button0
instance GHC.Show.Show Rosy.Controller.Kobuki.Button0
instance GHC.Enum.Enum Rosy.Controller.Kobuki.ButtonStatus
instance GHC.Generics.Generic Rosy.Controller.Kobuki.ButtonStatus
instance GHC.Classes.Ord Rosy.Controller.Kobuki.ButtonStatus
instance GHC.Classes.Eq Rosy.Controller.Kobuki.ButtonStatus
instance GHC.Show.Show Rosy.Controller.Kobuki.ButtonStatus
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.ButtonStatus
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Orientation
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.Orientation
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.Velocity
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Orientation
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Orientation
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Orientation
instance GHC.Show.Show Rosy.Controller.Kobuki.Orientation
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Position
instance Rosy.Controller.Core.Subscribed Rosy.Controller.Kobuki.Position
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Position
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Position
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Position
instance GHC.Show.Show Rosy.Controller.Kobuki.Position
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Velocity
instance Rosy.Controller.Core.Published Rosy.Controller.Kobuki.Velocity
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Velocity
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Velocity
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Velocity
instance GHC.Show.Show Rosy.Controller.Kobuki.Velocity
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Led2
instance Rosy.Controller.Core.Published Rosy.Controller.Kobuki.Led2
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Led2
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Led2
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Led2
instance GHC.Show.Show Rosy.Controller.Kobuki.Led2
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Led1
instance Rosy.Controller.Core.Published Rosy.Controller.Kobuki.Led1
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Led1
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Led1
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Led1
instance GHC.Show.Show Rosy.Controller.Kobuki.Led1
instance GHC.Enum.Enum Rosy.Controller.Kobuki.Color
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Color
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Color
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Color
instance GHC.Show.Show Rosy.Controller.Kobuki.Color
instance GHC.Enum.Enum Rosy.Controller.Kobuki.Sound
instance GHC.Generics.Generic Rosy.Controller.Kobuki.Sound
instance GHC.Classes.Ord Rosy.Controller.Kobuki.Sound
instance GHC.Classes.Eq Rosy.Controller.Kobuki.Sound
instance GHC.Show.Show Rosy.Controller.Kobuki.Sound
instance Data.Default.Generics.Default Rosy.Controller.Kobuki.Color
instance Rosy.Controller.Core.Published Rosy.Controller.Kobuki.Sound

module Rosy.Robot.State
eventTrigger :: Functor f => (TMVar a -> f (TMVar a)) -> EventState a -> f (EventState a)
eventState :: Functor f => (TVar a -> f (TVar a)) -> EventState a -> f (EventState a)
robotWheelR :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotWheelL :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotCliffR :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotCliffC :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotCliffL :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotBumperR :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotBumperC :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotBumperL :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotButton2 :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotButton1 :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotButton0 :: Functor f => (RobotEventState -> f RobotEventState) -> RobotState -> f RobotState
robotOdom :: Functor f => (TVar Odometry -> f (TVar Odometry)) -> RobotState -> f RobotState
robotDrag :: Functor f => (TVar Double -> f (TVar Double)) -> RobotState -> f RobotState
robotVel :: Functor f => (TVar Twist -> f (TVar Twist)) -> RobotState -> f RobotState
robotLed2 :: Functor f => (TVar Led -> f (TVar Led)) -> RobotState -> f RobotState
robotLed1 :: Functor f => (TVar Led -> f (TVar Led)) -> RobotState -> f RobotState
data EventState a
EventState :: TVar a -> TMVar a -> EventState a
[_eventState] :: EventState a -> TVar a
[_eventTrigger] :: EventState a -> TMVar a
type RobotEventState = EventState Bool
data RobotState
RobotState :: TVar Led -> TVar Led -> TVar Twist -> TVar Double -> TVar Odometry -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotEventState -> RobotState
[_robotLed1] :: RobotState -> TVar Led
[_robotLed2] :: RobotState -> TVar Led
[_robotVel] :: RobotState -> TVar Twist
[_robotDrag] :: RobotState -> TVar Double
[_robotOdom] :: RobotState -> TVar Odometry
[_robotButton0] :: RobotState -> RobotEventState
[_robotButton1] :: RobotState -> RobotEventState
[_robotButton2] :: RobotState -> RobotEventState
[_robotBumperL] :: RobotState -> RobotEventState
[_robotBumperC] :: RobotState -> RobotEventState
[_robotBumperR] :: RobotState -> RobotEventState
[_robotCliffL] :: RobotState -> RobotEventState
[_robotCliffC] :: RobotState -> RobotEventState
[_robotCliffR] :: RobotState -> RobotEventState
[_robotWheelL] :: RobotState -> RobotEventState
[_robotWheelR] :: RobotState -> RobotEventState
_robotPose :: RobotState -> IO Pose
newEventState :: a -> IO (EventState a)
newRobotState :: IO RobotState
changeRobotEventState :: RobotEventState -> Bool -> STM ()
debug :: String -> IO ()
instance GHC.Generics.Generic Rosy.Robot.State.RobotState
instance GHC.Generics.Generic (Rosy.Robot.State.EventState a)

module Rosy.Viewer.State
worldVel :: Functor f => (EventState Velocity -> f (EventState Velocity)) -> WorldState -> f WorldState
worldRobot :: Functor f => (RobotState -> f RobotState) -> WorldState -> f WorldState
worldMap :: Functor f => (MapState -> f MapState) -> WorldState -> f WorldState
worldDimension :: Functor f => (Dimension -> f Dimension) -> WorldState -> f WorldState
worldDisplay :: Functor f => (Display -> f Display) -> WorldState -> f WorldState
type MapState = [[Cell]]
data Cell
Grnd :: Cell
Wall :: Cell
Hole :: Cell
data WorldState
WorldState :: Display -> Dimension -> MapState -> RobotState -> EventState Velocity -> WorldState
[_worldDisplay] :: WorldState -> Display
[_worldDimension] :: WorldState -> Dimension
[_worldMap] :: WorldState -> MapState
[_worldRobot] :: WorldState -> RobotState
[_worldVel] :: WorldState -> EventState Velocity
newDisplay :: IO Display
newWorldState :: IO WorldState
mapInit :: MapState

-- | Size of each map cell in cm.
mapCellSize :: Double
mapSize :: MapState -> Dimension
instance GHC.Generics.Generic Rosy.Viewer.State.WorldState
instance GHC.Classes.Eq Rosy.Viewer.State.Cell
instance GHC.Generics.Generic Rosy.Viewer.State.Cell
instance GHC.Show.Show Rosy.Viewer.State.Cell

module Rosy.Robot.Kobuki
orNothing :: IO () -> IO ()
playSound :: Sound -> IO ()
soundCodeToFile :: (Eq a, Num a) => a -> [Char]
readRobotSound :: RobotState -> Node ThreadId
readRobotLed1 :: RobotState -> Node ThreadId
readRobotLed2 :: RobotState -> Node ThreadId
readRobotVelocity :: RobotState -> Node ThreadId
runRobotPhysics :: WorldState -> Node ThreadId
findRobotCollision :: WorldState -> DPoint -> Maybe (DPoint, DVector)
intersectMapLins :: WorldState -> [DPoint] -> [(DPoint, DVector)]
intersectMapLin :: WorldState -> DPoint -> [(DPoint, DVector)]
intersectMapCols :: WorldState -> [DPoint] -> [(DPoint, DVector)]
intersectMapCol :: WorldState -> DPoint -> [(DPoint, DVector)]
wheelCells :: WorldState -> Bool -> Double -> DPoint -> [Cell]
sensorCells :: WorldState -> Double -> DPoint -> [Cell]
sensorPos :: Double -> DPoint -> DPoint
posCell :: WorldState -> DPoint -> Maybe Cell
mapCell :: WorldState -> DPoint -> Maybe Cell
posToMap :: WorldState -> DPoint -> DPoint
posXToMapC :: WorldState -> Double -> Double
posYToMapL :: WorldState -> Double -> Double
mapToPos :: WorldState -> DPoint -> DPoint
robotCells :: WorldState -> DPoint -> [Cell]
writeRobotOdometry :: RobotState -> Node ()
writeRobotButtons :: RobotState -> Node ()
writeRobotBumpers :: RobotState -> Node ()
writeRobotCliffs :: RobotState -> Node ()
writeRobotWheels :: RobotState -> Node ()
runRobotNodes :: WorldState -> Node [ThreadId]
robotMaxLinearAccel :: Double
robotMaxRotationalAccel :: Double

-- | Robot maximum translational velocity cm/s
robotMaxLinearSpeed :: Double

-- | Robot maximum rotational velocity radians/s
robotMaxRotationalSpeed :: Double

-- | Robot size in cm.
robotSize :: Double
robotRadius :: Double
robotFrequency :: Double
robotInertia :: Double
robotMass :: Double
robotWheelDragFriction :: Double

module Rosy.Viewer.Core
runViewer :: WorldState -> IO ()
drawIO :: WorldState -> IO Picture
groundColor :: Color
wallColor :: Color
holeColor :: Color
robotColor :: Color
bumperOffColor :: Color
bumperOnColor :: Color
menuColor :: Color
drawCell :: Cell -> Window

-- | Converts a coordinate from cm to pixels
scalePx :: WorldState -> Float -> Dimension -> Float
scalePointPx :: WorldState -> (Float, Float) -> Dimension -> (Float, Float)
drawMenuIO :: WorldState -> Odometry -> IO Window
ledColor :: Led -> Color
drawBotIO :: WorldState -> Odometry -> IO Window
eventIO :: Event -> WorldState -> IO WorldState
isArrowKey :: SpecialKey -> Bool
keyStateToBool :: KeyState -> Bool
reactButton :: (RobotState -> RobotEventState) -> KeyState -> WorldState -> IO WorldState
changeVel :: SpecialKey -> WorldState -> IO WorldState
timeIO :: Float -> WorldState -> IO WorldState
writeViewerVelocity :: WorldState -> Node ()
runViewerNodes :: WorldState -> Node ()

module Rosy.Interface
startNode :: Node () -> WorldState -> IO ()
class Controller a
controller :: Controller a => a -> Node ()

-- | The main function that produces a Rosy program. It receives a robot
--   <a>Controller</a> that does the actual job of interacting with your
--   robot.
simulate :: Controller a => a -> IO ()
instance Rosy.Controller.Core.Published b => Rosy.Interface.Controller b
instance (Rosy.Controller.Core.Subscribed a, Rosy.Controller.Core.Published b) => Rosy.Controller.Core.Published (a -> b)


-- | The rosy educational robot programming language.
--   
--   You may use any of these functions and variables to control your
--   robot.
module Rosy

-- | The main function that produces a Rosy program. It receives a robot
--   <a>Controller</a> that does the actual job of interacting with your
--   robot.
simulate :: Controller a => a -> IO ()

-- | The first button of the robot.
data Button0
Button0 :: ButtonStatus -> Button0
[butttonStatus0] :: Button0 -> ButtonStatus

-- | The second button of the robot.
data Button1
Button1 :: ButtonStatus -> Button1
[buttonStatus1] :: Button1 -> ButtonStatus

-- | The third button of the robot.
data Button2
Button2 :: ButtonStatus -> Button2
[butttonStatus2] :: Button2 -> ButtonStatus

-- | The left-sided bumper of the robot.
data BumperLeft
BumperLeft :: BumperStatus -> BumperLeft
[bumperStatusLeft] :: BumperLeft -> BumperStatus

-- | The front bumper of the robot.
data BumperCenter
BumperCenter :: BumperStatus -> BumperCenter
[bumperStatusCenter] :: BumperCenter -> BumperStatus

-- | The right-sided bumper of the robot.
data BumperRight
BumperRight :: BumperStatus -> BumperRight
[bumperRightStatus] :: BumperRight -> BumperStatus

-- | The left-sided cliff sensor of the robot.
data CliffLeft
CliffLeft :: CliffStatus -> CliffLeft
[cliffStatusLeft] :: CliffLeft -> CliffStatus

-- | The front cliff sensor of the robot.
data CliffCenter
CliffCenter :: CliffStatus -> CliffCenter
[cliffStatusCenter] :: CliffCenter -> CliffStatus

-- | The right-sided cliff sensor of the robot.
data CliffRight
CliffRight :: CliffStatus -> CliffRight
[cliffStatusRight] :: CliffRight -> CliffStatus

-- | The left-side wheel of the robot.
data WheelLeft
WheelLeft :: WheelStatus -> WheelLeft
[wheelStatusLeft] :: WheelLeft -> WheelStatus

-- | The right-side wheel of the robot.
data WheelRight
WheelRight :: WheelStatus -> WheelRight
[wheelStatusRight] :: WheelRight -> WheelStatus

-- | The current position of the robot.
data Position
Position :: Double -> Double -> Position

-- | Coordinate in the horizontal X axis.
[positionX] :: Position -> Double

-- | Coordinate in the vertical Y axis.
[positionY] :: Position -> Double

-- | The orientation of the robot.
data Orientation
Orientation :: Double -> Orientation

-- | Orientation of the robot as an angle relative to the horizontal X axis
--   (radians).
[orientation] :: Orientation -> Double

-- | The velocity of the robot is defined using two parameters.
data Velocity
Velocity :: Double -> Double -> Velocity

-- | Linear velocity in the same direction as the robot (cm/s)
[velocityLinear] :: Velocity -> Double

-- | Angular velocity in the counter-clockwise direction (radians/s)
[velocityAngular] :: Velocity -> Double

-- | The current time in hours, minutes and seconds.
data Clock
Clock :: Int -> Int -> Int -> Clock
[hours] :: Clock -> Int
[minutes] :: Clock -> Int
[seconds] :: Clock -> Int

-- | One of the seven pre-configured robot sounds.
data Sound
OnSound :: Sound
OffSound :: Sound
Rechargesound :: Sound
ButtonSound :: Sound
ErrorSound :: Sound
CleaningStartSound :: Sound
CleaningEndSound :: Sound

-- | The robot's first led light.
data Led1
Led1 :: Color -> Led1
[ledColor1] :: Led1 -> Color

-- | The robot's second led light.
data Led2
Led2 :: Color -> Led2
[ledColor2] :: Led2 -> Color

-- | The velocity of the robot is defined using two parameters.
data Velocity
Velocity :: Double -> Double -> Velocity

-- | Linear velocity in the same direction as the robot (cm/s)
[velocityLinear] :: Velocity -> Double

-- | Angular velocity in the counter-clockwise direction (radians/s)
[velocityAngular] :: Velocity -> Double

-- | Command the robot to speak some sentence.
data Say
Say :: String -> Say

-- | Converts an angle in radians to degrees.
radiansToDegrees :: Floating a => a -> a

-- | Converts an angle in degrees to radians.
degreesToRadians :: Floating a => a -> a
